<?xml version="1.0" encoding="utf-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- coordinates for model and artifact -->
  <modelVersion>4.0.0</modelVersion>

  <!-- The Basics -->
  <groupId>eu.simuline</groupId>
  <artifactId>TestHelpers</artifactId>
  <packaging>jar</packaging>
  <version>1.1-SNAPSHOT</version>

  <!-- information for generating a site -->
  <name>TestHelpers</name>
  <description>
    A collection of elementary classes which prooved useful 
    for tests of software made at simuline (www.simulin.eu). 

    In fact, the functionality is quite inhomogeneous 
    all in one package eu.simuline.testhelpers. 
    As a documentation we refer the reader to the api-docs. 
  </description>


  <url>http://www.simuline.eu/TestHelpers/</url><!-- same as site-deploy -->
  <inceptionYear>2012</inceptionYear>
  <licenses>
    <license>
      <name>License, Version Apache 2</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
      <comments>A business-friendly OSS license</comments>
    </license>
  </licenses>

  <organization>
    <name>Simuline Organization (l2r)</name>
    <url>http://www.simuline.eu</url>
  </organization>

  <developers>
    <developer>
      <id>ER</id>
      <name>Ernst Reissner</name>
      <email>Ernst.Reissner@simuline.eu</email>
      <organization>l2r</organization>
      <timezone>Europe/Berlin</timezone>
      <properties>
        <picUrl>http://www.simuline.eu/Gluck_0001.gif</picUrl>
      </properties>
    </developer>
  </developers>
  <!-- mailingLists></mailingLists-->


  <properties>
    <!-- to keep dependencies up to date: 
	 mvn versions:display-plugin-updates
	 mvn versions:display-dependency-updates -->
    <versionMvn>3.5.0</versionMvn>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <versionPmd>5.8.1</versionPmd><!-- with mvn plugin 3.8 -->
    <versionPmdMvnPlugin>3.8</versionPmdMvnPlugin><!-- works with pmd 5.8.1 -->

    <maven.pmd.rulesetfiles>
      ${basedir}/../config/myPmdRuleset.xml
    </maven.pmd.rulesetfiles>
  </properties>

  <!-- source repositories: at the moment not needed. -->
  <repositories>
    <repository>
      <id>localRepository</id>
      <url>file:///home/ernst/Software/RepositoryLocal/maven2/</url>
      <!--url>ftp://www.simuline.eu/public_ftp/RepositoryTarget</url-->
    </repository>
  </repositories>


  <!-- target repository. This will change. 
  In the long run it shall be something in maven central -->
  <distributionManagement>
    <site>
      <id>fileSite</id>
      <!--url>file:///home/ernst/Software/RepositoryLocal/Site</url-->
      <url>ftp://www.simuline.eu/public_html/TestHelpers</url>
    </site>

    <repository>
      <id>fileRepository</id>
      <!--url>file:///home/ernst/Software/RepositoryLocal/maven2/</url-->
      <!--url>ftp://www.simuline.eu/public_ftp/RepositoryTarget</url-->
      <url>ftp://www.simuline.eu/public_html/RepositoryMaven</url>
    </repository>
  </distributionManagement>


  <scm>
    <connection>scm:svn:file:///SVN_Archive</connection>
    <developerConnection>scm:svn:file:///SVN_Archive</developerConnection> <!-- the default -->
    <url>file:///SVN_Archive</url><!-- publicly browseable -->
  </scm>




  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <!--scope>test</scope--> 
      <!-- remove to make javadoc run import org.junit -->
    </dependency>

    <dependency>
      <groupId>net.sourceforge.cobertura</groupId>
      <artifactId>cobertura</artifactId>
      <version>2.1.1</version><!-- 2.1.1   1.9.4.1 -->
      <scope>test</scope>
    </dependency>

    <!-- this one is outdated and replaced by 
	 com.google.code.findbugs/annotations 
	 which cannot be downloaded although in repo. -->
    <dependency>
      <groupId>net.sourceforge.findbugs</groupId>
      <artifactId>annotations</artifactId>
      <version>1.3.2</version>
      <!--scope>provided</scope-->
    </dependency>
  </dependencies>

  <!-- Build Settings -->
  <build>


    <pluginManagement>
      <plugins>
	<!-- all plugins used for build and for reporting -->
	<!-- checkstyle plugin-->
	<plugin>
	  <groupId>org.apache.maven.plugins</groupId>
	  <artifactId>maven-checkstyle-plugin</artifactId>
	  <version>2.17</version>

	  <dependencies>
	    <dependency>
	      <groupId>com.puppycrawl.tools</groupId>
	      <artifactId>checkstyle</artifactId>
	      <version>8.4</version>
	    </dependency>
	  </dependencies>

	  <configuration>
	    <headerLocation>
	      <!-- (Default: LICENSE.txt)
	      User property: checkstyle.header.file
	      Specifies the location of the License file 
	      (a.k.a. the header file) that can be used by Checkstyle 
	      to verify that source code has the correct license header. -->
	    </headerLocation>
 	    <violationIgnore>
	      <!-- User property: checkstyle.violation.ignore
		   Violations to ignore. 
		   This is a comma-separated list, 
		   each value being either a rule name, 
		   a rule category or a java package name of rule class. -->
	    </violationIgnore>
	    <configLocation>
	      ${basedir}/../config/myChkStyleRuleset.xml
	    </configLocation>
	    <encoding>UTF-8</encoding>
	  </configuration>
	</plugin>

	<!-- findbugs plugin -->
	<plugin>
	  <groupId>org.codehaus.mojo</groupId>
	  <artifactId>findbugs-maven-plugin</artifactId>
	  <version>3.0.5</version>
	  <configuration>
	    <xmlOutput>true</xmlOutput>
	    <!--onlyAnalyze>
	      eu.simuline.relana.expressions.*, 
	      eu.simuline.relana.model.*, 
	      eu.simuline.relana.sys.*, 
	    </onlyAnalyze-->
	    <!-- Optional directory to put findbugs xdoc xml report -->
	    <!--xmlOutputDirectory>target/site</xmlOutputDirectory-->
	  </configuration>
	</plugin>

      <!-- pmd plugin **** reporting or build? -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-pmd-plugin</artifactId>
	<version>${versionPmdMvnPlugin}</version><!-- works with pmd 5.8.1 -->

        <dependencies>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-core</artifactId>
            <version>${versionPmd}</version>
          </dependency>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-java</artifactId>
            <version>${versionPmd}</version>
          </dependency>
        </dependencies>

        <configuration>
          <linkXref>true</linkXref><!-- default -->
          <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
          <minimumTokens>100</minimumTokens><!-- for cpd -->
          <rulesets>
	    <ruleset>${maven.pmd.rulesetfiles}</ruleset>
          </rulesets>
	  <skipEmptyReport>false</skipEmptyReport>
        </configuration>
      </plugin>


 
      </plugins>
    </pluginManagement>


    <plugins>

      <!-- plugin to keep versions up to date -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.5</version>
      </plugin>

       <!-- at the moment just to enforce maven version 
	   **** seems to be buggy and to make also update of plugins unsafe -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M1</version>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                 <!--version>${versionMvn}</version-->
                <requireMavenVersion>
                  <version>3.5.0</version>
                 </requireMavenVersion>
                <!--requireJavaVersion>
                  <version>1.8</version>
                </requireJavaVersion-->
              </rules>
	      <!--alwaysFail>true</alwaysFail-->
	      <fail>true</fail>
 	      <ignoreCache>true</ignoreCache>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- information about a project or the system -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-help-plugin</artifactId>
        <version>2.2</version>
      </plugin>

      <!-- configuration for clean plugin -->
      <plugin>
	<artifactId>maven-clean-plugin</artifactId>
	<version>3.0.0</version>
	<configuration>
	  <verbose>true</verbose>
	</configuration>
      </plugin>

      <!-- This plugin will set properties values 
	   using dependency information -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-dependency-plugin</artifactId>
	<version>3.0.2</version>
	<executions>
	  <execution>
	    <goals>
	      <goal>properties</goal>
	    </goals>
	  </execution>
	</executions>
      </plugin>


      <!-- compiler plugin: Use Java 6 -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
	  <source>1.8</source>
          <target>1.8</target>
	</configuration>
      </plugin>

     <!-- configuration for site -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.6</version>
        <configuration>
          <locales>en</locales>
        </configuration>
      </plugin>

      <!-- javadoc plugin -->
      <!-- synchronize with reporting -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-javadoc-plugin</artifactId>
	<version>3.0.0-M1</version>
	<executions>
	  <execution>
	    <id>attach-javadocs</id>
	    <goals>
	      <goal>jar</goal>
	    </goals>
	    <configuration>
	      <sourcepath>
		${project.basedir}/src/main/java:${project.basedir}/src/test/java
	      </sourcepath>
	  <tags>
	    <tag>
	      <name>To.Do</name>
	      <!-- todo tag for all places -->
	      <placement>a</placement>
	      <head>what is to be done in the present code fragment. </head>
	    </tag>
	  </tags>
	  <breakiterator>true</breakiterator>

	  <links>
	    <link>file:///usr/share/javadoc/java-1.8.0-openjdk/api/</link>
	    <link>http://junit.sourceforge.net/javadoc</link>
	  </links>
	      <show>private</show>
<!-- -Xdoclint:reference  -->
	      <additionalparam>-Xdoclint:html -Xdoclint:reference --allow-script-in-comments</additionalparam>
	    </configuration>
	  </execution>
	</executions>
      </plugin>

      <!-- Configure tag name for mvn release:prepare -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.5.3</version>
        <configuration>
          <tagNameFormat>release-@{project.version}</tagNameFormat>
        </configuration>
      </plugin>

      <!-- Deploy sources.jar files -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <phase>verify</phase>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-install-plugin</artifactId>
	<version>2.5.2</version>
      </plugin>

      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-deploy-plugin</artifactId>
	<version>2.8.2</version>
      </plugin>


     </plugins>

    <extensions>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
         <artifactId>wagon-ftp</artifactId>
         <version>2.10</version>
      </extension>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
         <artifactId>wagon-file</artifactId>
         <version>2.10</version>
      </extension>
      <extension>
	<groupId>org.apache.maven.wagon</groupId>
	<artifactId>wagon-http</artifactId>
	<version>3.1.0</version>
      </extension>
      <!-- Deploy via svn -->
      <!--extension>
        <groupId>org.jvnet.wagon-git</groupId>
        <artifactId>wagon-git</artifactId>
        <version>1.9</version>
      </extension-->
    </extensions>
  </build>


  <reporting>
    <plugins>

      <!-- creates a representation of the source code 
	   with line numbers and cross references. 
	   Forms the base for pmd, findbgs and checkstyle 
	   e.g. providing line numbers -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-jxr-plugin</artifactId>
	<version>2.5</version>
      </plugin>


      <!-- configures the aspects of the reporting, 
	   i.e. the kinds of reports generated. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>2.9</version>
        <configuration>
          <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
        </configuration>
	<reportSets>
	  <reportSet>
	    <id>gen-report</id>
	    <reports>
	      <report>index</report>
	      <report>summary</report>
	      <report>license</report>
	      <report>project-team</report>

	      <report>cim</report>
	      <!--report>dependencies</report-->
	      <report>dependency-convergence</report>
	      <report>dependency-info</report>
	      <report>dependency-management</report>
	      <report>distribution-management</report>
	      <report>issue-tracking</report>
	      <report>mailing-list</report>
	      <report>modules</report>
	      <report>plugin-management</report>
	      <report>plugins</report>
	      <report>scm</report>
	    </reports>
	  </reportSet>
	</reportSets>
      </plugin>

      <!-- Creates surefire test reports -->
      <plugin>
 	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>${versionTestPlugins}</version>
	<configuration>
	  <!-- to show failed tests only -->
	  <showSuccess>false</showSuccess>
	</configuration>
      </plugin>

       <!-- pmd plugin **** reporting or build? -->
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-pmd-plugin</artifactId>
	<version>${versionPmdMvnPlugin}</version><!-- works with pmd 5.8.1 -->
        <!--dependencies>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-core</artifactId>
            <version>${versionPmd}</version>
          </dependency>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-java</artifactId>
            <version>${versionPmd}</version>
          </dependency>
        </dependencies-->
       <configuration>
          <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
	  <!--  in addition to "none", "csv", "xml", "txt" 
	       or the full class name of the PMD renderer to use. -->
          <minimumTokens>100</minimumTokens><!-- for cpd -->
	  <format>xml</format>

	  <skip>false</skip>
	  <skipEmptyReport>false</skipEmptyReport>
	  <!--suppressMarker>NOPMD</suppressMarker-->
	  <includeTests>false</includeTests>
          <rulesets>
	    <ruleset>${maven.pmd.rulesetfiles}</ruleset>
          </rulesets>
          <excludes>
            <exclude>eu/simuline/relana/parser/*Lexer.java</exclude>
            <exclude>eu/simuline/relana/parser/SClassParser.java</exclude>
            <exclude>eu/simuline/relana/parser/*Parser.java</exclude>
	    <include>eu/simuline/relana/parser/*Listener.java</include>
	    <include>eu/simuline/relana/parser/*Visitor.java</include>
          </excludes>
	  <outputDirectory>${project.basedir}/target/site/</outputDirectory>
        </configuration>
      </plugin>

      <plugin>
 	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <!--version>2.17</version>

	<dependencies>
	  <dependency>
	    <groupId>com.puppycrawl.tools</groupId>
	    <artifactId>checkstyle</artifactId>
	    <version>8.4</version>
	  </dependency>
	</dependencies>

	<configuration>
	  <configLocation>
	    ${basedir}/config/myChkStyleRuleset.xml
	  </configLocation>
         <encoding>UTF-8</encoding>
	  <excludes>**/parser/**</excludes>
	</configuration-->
      </plugin>

      <!-- findbugs -->
      <plugin>
 	<groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
	<configuration>
	  <xmlOutput>true</xmlOutput>
	  <onlyAnalyze>
	    eu.simuline.relana.expressions.*, 
	    eu.simuline.relana.model.*, 
	    eu.simuline.relana.sys.*, 
	    eu.simuline.testhelpers.*, 
	    eu.simuline.util.*, 
	  </onlyAnalyze>
	  <!-- Optional directory to put findbugs xdoc xml report -->
	  <!--xmlOutputDirectory>target/site</xmlOutputDirectory-->
        </configuration>
      </plugin>

      <!-- pmd plugin **** reporting or build? -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>${versionPmdMvnPlugin}</version><!-- works with pmd 5.8.1 -->
        <!--dependencies>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-core</artifactId>
            <version>${versionPmd}</version>
          </dependency>
          <dependency>
            <groupId>net.sourceforge.pmd</groupId>
            <artifactId>pmd-java</artifactId>
            <version>${versionPmd}</version>
          </dependency>
        </dependencies-->

        <configuration>
	  <format>xml</format><!--  in addition to "none", "csv", "xml", "txt" or the full class name of the PMD renderer to use. -->
	  <skip>false</skip>
	  <skipEmptyReport>false</skipEmptyReport>
	  <!--suppressMarker>NOPMD</suppressMarker-->
	  <includeTests>false</includeTests>
          <rulesets>
	    <ruleset>${maven.pmd.rulesetfiles}</ruleset>
          </rulesets>
	  <outputDirectory>${project.basedir}/target/site/</outputDirectory>
        </configuration>
      </plugin>

      <!-- determines code coverage of tests 
	   **** ignores and excludes are .... ignored **** -->
      <plugin>
	<groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>2.7</version>
	<configuration>
          <instrumentation>
            <ignores>
              <ignore>org.*</ignore>
            </ignores>
	    <excludes>
	      <exclude>org/**/*.class</exclude>
	    </excludes>

	  </instrumentation>
	  <quiet>true</quiet>
	  <formats>
	    <format>xml</format>
	    <format>html</format>
	  </formats>
	</configuration>
      </plugin>

      <!-- javadoc plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.0.0-M1</version>
        <configuration>
	  <!--phase>generate-sources</phase--> <!-- this is the default -->
	  <sourcepath>
	    ${project.basedir}/src/main/java:${project.basedir}/src/test/java
	  </sourcepath>
	  <tags>
	    <tag>
	      <name>To.Do</name>
	      <!-- todo tag for all places -->
	      <placement>a</placement>
	      <head>what is to be done in the present code fragment. </head>
	    </tag>
	  </tags>
	  <excludePackageNames>
	    eu.simuline.junit
	  </excludePackageNames>
	  <breakiterator>true</breakiterator>
	  <!-- does not work with current plugin version: bug already filed 
	  -->
	  <links>
	    <link>file:///usr/share/javadoc/java-1.8.0-openjdk/api/</link>
	    <link>http://www.antlr.org/api/JavaTool/</link>
	    <link>http://www.antlr.org/api/Java/</link>
	    <link>http://www.stringtemplate.org/api/</link>
	    <link>https://jna.java.net/javadoc/</link>
	    <link>http://junit.sourceforge.net/javadoc</link>
	  </links>
          <show>private</show>
	  <!-- **** myDefault should be linked to ${basedir}/config/MathJax.. -->
	  <additionalparam>-Xdoclint:html -Xdoclint:reference --allow-script-in-comments</additionalparam>
	  <header>Relana
<!--&lt;script type="text/javascript" \
	  src="file:///${basedir}/jars/MathJax/latest/MathJax.js?config=myDefault"&gt; &lt;/script&gt;-->
	  </header>
	</configuration>
      </plugin>

      <!-- changes plugin: src/changes/changes.xml -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-changes-plugin</artifactId>
        <version>2.12.1</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>changes-report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

    </plugins>
  </reporting>





</project>
